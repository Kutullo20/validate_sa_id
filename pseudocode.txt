tdd/step-01-failing-test------------->START

@@MAIN CLASS

CLASS ValidateSaId
    METHOD validate(idNumber)
        PRINT "[VALIDATION] Checking ID: " + idNumber + " -> FAIL (RED PHASE)"
        RETURN false
    END METHOD
END CLASS


@@TEST FILE


CLASS ValidateSaIdTest
    METHOD testValidIds()
        PRINT "\n=== TEST START (RED PHASE) ==="
        
        ARRAY validIds = ["2001014800086", "2909035800085"]
        
        FOR EACH id IN validIds
            PRINT "Testing ID: " + id
            BOOLEAN result = ValidateSaId.validate(id)
            PRINT "RESULT: " + id + " -> " + (IF result THEN "PASS" ELSE "FAIL")
            ASSERT result IS TRUE WITH MESSAGE "RED PHASE: Should fail for ID " + id
        END FOR
        
        PRINT "=== TEST END (EXPECTED FAILURE) ===\n"
    END METHOD
END CLASS


tdd/step-01-failing-test------------->END

tdd/step-01-pass-test---------------->START

@@MAIN CLASS

CLASS ValidateSaId
    METHOD validate(idNumber)
        logPrefix = "[VALIDATOR]"
        
        IF idNumber IS NULL THEN
            status = "FAIL"
            reason = "ID cannot be null"
        ELSE IF idNumber DOES NOT MATCH "13 digits" THEN
            status = "FAIL"
            reason = "ID must be 13 digits"
        ELSE
            status = "PASS"
            reason = "Valid 13-digit format"
        END IF
        
        PRINT FORMAT "%s STATUS: %-4s | ID: %-13s | REASON: %s",
                    logPrefix, status, idNumber, reason
        
        RETURN status EQUALS "PASS"
    END METHOD
END CLASS

@@TEST FILE

CLASS ValidateSaIdTest
    METHOD testValidIds()
        PRINT "\n=== TEST VALID IDs ==="
        
        ARRAY validIds = ["2001014800086", "2909035800085"]
        
        FOR EACH id IN validIds
            PRINT FORMAT "[TESTER] Testing ID: %s", id
            BOOLEAN result = ValidateSaId.validate(id)
            
            STRING testResult = IF result THEN "PASS" ELSE "FAIL"
            PRINT FORMAT "[TESTER] RESULT: %-4s | ID: %-13s", testResult, id
            
            ASSERT result IS TRUE WITH MESSAGE "Validation failed for ID: " + id
        END FOR
        
        PRINT "=== TEST COMPLETE ===\n"
    END METHOD
    
    METHOD testInvalidIds()
        PRINT "\n=== TEST INVALID IDs ==="
        
        ARRAY invalidIds = [null, "123", "ABCDEFGHIJKLM"]
        
        FOR EACH id IN invalidIds
            PRINT FORMAT "[TESTER] Testing ID: %s", id
            BOOLEAN result = ValidateSaId.validate(id)
            
            STRING testResult = IF result THEN "PASS" ELSE "FAIL"
            PRINT FORMAT "[TESTER] RESULT: %-4s | ID: %-13s", testResult, id
            
            ASSERT result IS FALSE WITH MESSAGE "Validation incorrectly passed for ID: " + id
        END FOR
        
        PRINT "=== TEST COMPLETE ===\n"
    END METHOD
END CLASS

tdd/step-01-pass-test---------------->END

tdd/step-02-failing-test---------------->START


@@MAIN CLASS

CLASS ValidateSaId

    METHOD validate(idNumber: String) RETURNS boolean
        // Check if the input is null or has length less than 13
        IF idNumber IS NULL OR LENGTH(idNumber) < 13 THEN
            RETURN false
        ELSE
            RETURN true
        END IF
    END METHOD

END CLASS

@@TEST CLASS

CLASS ValidateSaIdTest

    METHOD testShortStringsAllShouldFail()
        // Define test cases that should all fail validation
        invalidIds = [
            null,               // null case
            "",                 // empty string
            "1",                // single character
            "123",              // 3 characters
            "123456789012"     // 12 characters (1 short of required length)
        ]

        PRINT "SHORT STRING VALIDATION (ALL SHOULD FAIL)"
        PRINT "========================================"

        // Test each invalid ID
        FOR EACH id IN invalidIds DO
            // Call validation method
            result = ValidateSaId.validate(id)
            
            // Format output message
            displayId = IF id IS NULL THEN "null" ELSE "'" + id + "'"
            status = IF result THEN "PASS (UNEXPECTED)" ELSE "FAIL (CORRECT)"
            
            PRINT "Input: " + displayId + " â†’ " + status
            
            // Assert that validation fails
            ASSERT result IS false WITH MESSAGE "Input: " + displayId + " unexpectedly passed validation"
        END FOR
    END METHOD

END CLASS

tdd/step-02-failing-test---------------->END